//we are working with the database, so we will start by creating a listings table, as we have a user table by default with Laravel
//make sure to modify the table and add a column of user_id as that will be the one to many relation with the user table
listings migration
    public function up()
    {
        Schema::create('listings', function (Blueprint $table) {
            $table->increments('id');
            $table->integer('user_id');
            $table->string('name');
            $table->string('address');
            $table->string('website');
            $table->string('email');
            $table->string('phone');
            $table->string('bio');
            $table->timestamps();
        });
    }
    
 //after we have created a new table and perhaps manually added a user to the database, we will go to our models/tabels
   //in our User model add one to many relationship, the method below will return many listings for one user
   
    public function listings(){
        return $this->hasMany('App\Listing');
    }
    
    
 //now go to the listings model below we verify that the listings belong to the user
 public function user(){
        return $this->belongsTo('App\User');
    }
 
 //now in our dashboard controller import the user model/tabel so we can use it within this controller
 use Illuminate\Http\Request;
use App\User;

//notice we use the index method within the controller so the data will be displayed on the main dashboard page
    public function index()
    {
//        this variable will return the current users id
        $user_id = auth()->user()->id;
//        Find user id in database, notice how we are using the User model/table object below, to use this we must import this above.
        $user = User::find($user_id);
//       pushing data to view
        return view('dashboard')->with('listings', $user->listings);
    }
    
//go to dashboard view
 @if(count($listings))
                        <table class="table table-stripped">
                            <tr>
                                <th>Company</th>
                                <th>Address</th>
                                <th>Website</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Company Bio</th>
                            </tr>
                            @foreach($listings as  $listing)
                                <tr>
                                <td>{{$listing->name}}</td>
                                <td>{{$listing->address}}</td>
                                <td>{{$listing->website}}</td>
                                <td>{{$listing->email}}</td>
                                <td>{{$listing->phone}}</td>
                                <td>{{$listing->bio}}</td>
                                </tr>
                                @endforeach
                        </table>


                        @endif



//checking users realtionship with tinker
create object of the user or thing you want to look at
$user = App\User::find(1)


now we can check the relationship by simply arrowing to the table we wish to view inregards to relationships 
$user->role
